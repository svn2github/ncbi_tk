; General purpose server parameters
[server]

; maximum number of simultaneous connections
; Allowed values: 1...1000
; Default: 100
; Reconfigurable via RECO
max_connections=1000

; maximum number of processing threads
; Allowed values: 1...1000
; Default: 25
max_threads=25

; initial number of threads created for incoming requests
; Allowed values: 1...1000
; Default: 10
; CURRENTLY NOT SUPPORTED
; init_threads=10

; TCP/IP port number server responds on
; No default value. The port is a mandatory parameter
port=9101

; Use name instead of IP address in job id
; Default: false
use_hostname=false

; Network inactivity timeout in seconds
; Default: 10
; Reconfigurable via RECO
network_timeout=180

; Server side logging
; Default: true
log=true

; if true then each job in a batch submit is logged as if it were
; an individual submit
; The flag is taken into consideration only if log == true
; Default: true
log_batch_each_job=true

; If true then the notification thread will produce log records
; The flag is taken into consideration only if log == true
; Default: false
log_notification_thread=false

; if true then the cleaning thread will produce log records
; The flag is taken into consideration only if log == true
; Default: true
log_cleaning_thread=false

; if true then the execution watcher thread will produce log records
; The flag is taken into consideration only if log == true
; Default: true
log_execution_watcher_thread=false

; if true then the statistics thread will produce log records
; The flag is taken into consideration only if log == true
; Default: true
log_statistics_thread=true

; Max number of jobs deleted in one garbage collector iteration.
; See also the 'purge_timeout' and 'scan_batch_size' parameters.
; It is recommended to have del_batch_size and purge_timeout in balance with
; the incoming number of jobs. Otherwise the actual deletion of records is
; delayed and unnecessery records in the DB may slowdown netschedule.
; Default: 100
del_batch_size=100

; Max number of jobs marked for deletion during one garbage collector iteration.
; Default: 200
markdel_batch_size=200

; Max number of jobs tested for expiration in one garbage collector iteration.
; It is recommended that scan_batch_size > del_batch_size.
; Default: 10000
scan_batch_size=10000

; Interval between garbage collector runs
; Default: 0.1 sec
purge_timeout=0.1

; A list of hosts from which administrators can connect to the server.
; The separators for the host names are: ';', ',', space, '\n', '\r'.
; Default: empty list which means any host is allowed.
admin_host=

; A list of client names which can execute commands requiring administrative
; privileges. The separators for the client names are: ';', ',', space, '\n', '\r'.
; Default: empty list which means that nobody will be able to execute
;          administrative commands.
admin_client_name=netschedule_admin, netschedule_control




; Affinity related parameters

; Max number of affinities which clients are allowed to report as preferred.
; Default: 10000
max_affinities=10000

; Affinity garbage collector parameters. See CXX-2838

; If the affinity registry has more records than specified by this parameter
; then aggressive cleaning of the registry is switched on.
; Default: 90 (%, integer)
affinity_high_mark_percentage=90

; If the affinity registry has less records than specified by this parameter
; then no cleaning registry will be performed.
; If the number of records is between affinity_low_mark_percentage and
; affinity_high_mark_percentage then a normal cleaning of the registry is
; switched on respecting the affinity_dirt_percentage value (see below).
; Default: 50 (%, integer)
affinity_low_mark_percentage=50

; Maximum number of records to be removed at one time by the garbage collector
; when aggressive cleaning is switched on.
; Only those records which have no jobs associated with them are deleted.
; Default: 1000
affinity_high_removal=1000

; Maximum number of records to be removed at one time by the garbage collector
; when aggressive cleaning is switched off.
; Only those records which have no jobs associated with them are deleted.
; Default: 100
affinity_low_removal=100

; If the number of delete candidate records in the registry is less than this
; value and the number of records the registry has is between
; affinity_low_mark_percentage and affinity_high_mark_percentage then
; there will be no cleaning.
; Default: 20 (%, integer)
affinity_dirt_percentage=20



; Group related parameters

; Max number of groups which could be served by a queue
; Default: 10000
max_groups=10000

; Group garbage collector parameters

; If the group registry has more records than specified by this parameter
; then aggressive cleaning of the registry is switched on.
; Default: 90 (%, integer)
group_high_mark_percentage=90

; If the group registry has less records than specified by this parameter
; then no cleaning registry will be performed.
; If the number of records is between group_low_mark_percentage and
; group_high_mark_percentage then a normal cleaning of the registry is
; switched on respecting the group_dirt_percentage value (see below).
; Default: 50 (%, integer)
group_low_mark_percentage=50

; Maximum number of records to be removed at one time by the garbage collector
; when aggressive cleaning is switched on.
; Only those records which have no jobs associated with them are deleted.
; Default: 1000
group_high_removal=1000

; Maximum number of records to be removed at one time by the garbage collector
; when aggressive cleaning is switched off.
; Only those records which have no jobs associated with them are deleted.
; Default: 100
group_low_removal=100

; If the number of delete candidate records in the registry is less than this
; value and the number of records the registry has is between
; group_low_mark_percentage and group_high_mark_percentage then
; there will be no cleaning.
; Default: 20 (%, integer)
group_dirt_percentage=20



; Scope related parameters

; Max number of scopes which could be served by a queue
; Default: 10000
max_scopes=10000

; Scope garbage collector parameters

; If the scope registry has more records than specified by this parameter
; then aggressive cleaning of the registry is switched on.
; Default: 90 (%, integer)
scope_high_mark_percentage=90

; If the scope registry has less records than specified by this parameter
; then no cleaning registry will be performed.
; If the number of records is between scope_low_mark_percentage and
; scope_high_mark_percentage then a normal cleaning of the registry is
; switched on respecting the scope_dirt_percentage value (see below).
; Default: 50 (%, integer)
scope_low_mark_percentage=50

; Maximum number of records to be removed at one time by the garbage collector
; when aggressive cleaning is switched on.
; Only those records which have no jobs associated with them are deleted.
; Default: 1000
scope_high_removal=1000

; Maximum number of records to be removed at one time by the garbage collector
; when aggressive cleaning is switched off.
; Only those records which have no jobs associated with them are deleted.
; Default: 100
scope_low_removal=100

; If the number of delete candidate records in the registry is less than this
; value and the number of records the registry has is between
; scope_low_mark_percentage and scope_high_mark_percentage then
; there will be no cleaning.
; Default: 20 (%, integer)
scope_dirt_percentage=20





; Statistics thread logging interval (if allowed by settings above)
; The value must be >= 1
; Default: 10 (seconds, integer)
stat_interval=10


; Performance logging of the job counters per state per queue
; The value must be >= 0 (0 means no records produced)
; Default: 0 (seconds, integer)
; Note: to have the records performance logging must be switched on via
;       [log]/PerfLogging parameter set to true
job_counters_interval=0


; Max size for the client transient data
; Default: 2048 bytes
max_client_data=2048


; The size of the empty file which will be created in data/dump directory
; to reserve space for the queues flat files dump
; Default: 1GB
reserve_dump_space=1GB


; The max number of cache records which trigger the cleaning thread to delete
; some. The cache is used to speed-up the WST2 responce. Instead of going to
; the BDB table to pick the client IP, SID and PHID it might be possible to get
; them from the cache.
; Default: 2000 (records per queue, integer)
; 0 means there is no limit. The value is reconfigurable on the fly.
wst_cache_size=2000


; If a queue is listed here (or if a queue is derived from one of the
; classes listed here), then its state transition performance will be
; logged. Nothing is logged by default.
; Special value '*' -- to log everything
state_transition_perf_log_queues  =
state_transition_perf_log_classes =



[Log]

; File name where the server stores the log messages.
file=netscheduled.log


[Diag]
; do not strip any request-start messages
AppLog_Rate_Limit=4294967295



; BerkeleyDB related parameters
[bdb]

; Version of the storage data model to be forced at the start time.
; If a database exists and is not recreated at the startup, the server reads the
; data model version and then checks against the force_storage_version value.
; If the value does not match then the server does not start.
; Default: the current version of the storage data model.
; force_storage_version=




; Directory where the database files are stored.
; It is recommended to have this directory on the fastest available filesystem.
; No default, the parameter is mandatory.
path=data

; how many queue databases to open on start. Berkeley DB has instability
; when you open/close databases during other database operation.
; We pre-allocate some amount of databases to open on start and re-use them
; for all actual queues. This parameter effectively sets the limit on the
; number of queues per server, but Berkeley DB limited in this anyway (safe
; number is no more than 50 queues).
; Default: 50
max_queues=50

; amount of memory allocated by BerkeleyDB for the database cache
; Berkeley DB page cache) (More is better, see private_env though)
; Default: 0 - turning on BerkeleyDB default
mem_size=100M

; Maximum number of mutexes.
; Default: 0 - turning on BerkeleyDB default
mutex_max=1000000

; maximum number of locks, lockers, and lock objects
; should be increased for bulk transactions (or large number of queues)
; Default: 0 - turning on BerkeleyDB default
max_locks=500000

; Default: 0 - turning on BerkeleyDB default
max_lockers=250000

; Default: 0 - turning on BerkeleyDB default
max_lockobjects=1000000

; when non 0 transaction LOG will be placed to memory for better performance
; as a result transactions become non-durable and there is a risk of
; loosing the data if server fails
; (set to at least 100M if planned to have bulk transactions)
; Default: 0
log_mem_size=150M

; Checkpoint threshold in KB of data written
; Default: 5000
checkpoint_kb=5000

; Checkpoint threshold in minutes since last checkpoint
; Default: 5
checkpoint_min=5

; use syncronous or asyncronous writes (used with transactions)
; Default: false
sync_transactions=false

; Direct IO for database files
; Default: false
direct_db=false

; Direct IO for transaction logs
; Default: false
direct_log=false

; use private BerkeleyDB environment. If true, NS does not use shared memory,
; but BDB has strange memory allocation behavior, so do not use with mem_size
; larger than 10M.
; Default: false.
private_env=false



; Sample queue class
; Queue class can specify all the parameters which appear in the [queue_...]
; sections (except of the 'class' parameter.
; Later on a queue can specify a class as a basis for a queue (which means to
; take all the parameters from the queue class) and overwrite only those which
; the queue needs to have of different values.
[qclass_MyQueueClass]

timeout=1800

; ... the rest of parameters




; Sample queue
[queue_TEST]

; Arbitrary string which describes the queue
; Default: empty string
description=Queue descripion

; Refers to the queue class name. The queue class is described in another section
; Default: empty string, i.e. no base queue class
class=MyQueueClass

; Inactivity timeout for non-running and non-reading jobs which triggers
; the job to be marked for deletion.
; Default: 3600 (float, seconds)
timeout=3600

; Interval for available job notifications when they are sent with high frequency.
; Default: 0.1 (float, seconds)
notif_hifreq_interval=0.1

; Period of time within which available job notifications are sent with high
; frequency if there were no requests from a worker node which
; requested a job earlier.
; Default: 5 (float, seconds)
notif_hifreq_period=5

; Multiplier for the notif_hifreq_interval to calculate the interval between
; notifications when they are sent with low frequency.
; Default: 50 (integer)
notif_lofreq_mult=50

; Delay for sending UDP notifications that there is a vacant job for all worker
; nodes except one. If configured (i.e. != 0) and there are more than one
; candidates for notifications then the one to send to will be picked randomly.
; Default: 0.0 (float, seconds)
notif_handicap=0.0

; The size of a buffer for reading jobs from a database before dumping them.
; Allowed range is 100-10000
; Default: 100 (integer, jobs)
dump_buffer_size=100


; Number of clients printed in a single batch in the STAT CLIENTS command
; Allowed range is 100-10000
; Default: 100 (integer, clients)
dump_client_buffer_size=100

; Number of affinities printed in a single batch in the STAT AFFINITIES command
; Allowed range is 100-10000
; Default: 100 (integer, affinities)
dump_aff_buffer_size=100

; Number of groups printed in a single batch in the STAT GROUPS command
; Allowed range is 100-10000
; Default: 100 (integer, groups)
dump_group_buffer_size=100


; If there is no information about a job in the Running state
; within this timeout then the server considers this try as failed and moves
; the job to the appropriate state.
; The timeout is used only if there were no individual running
; timeout provided by the user.
; Default: 3600 (float, seconds)
run_timeout=1800


; If there is no information about a job in the Reading state
; within this timeout then the server considers this try as failed and moves
; the job to the appropriate state.
; The timeout is used only if there were no individual reading timeout provided
; by the user.
; Default: 10 (float, seconds)
read_timeout=10

; List of client names and their versions which are allowed for the queue.
; When a client connects it is checked against this list and if the name
; is not in the list or the version is below allowed then the client will be rejected.
; The separators for the programs are: ';', ','.
; E.g.: program=test 2.0.0; test 1.0.0; Cgi_Tunnel2Grid 1.0.0
; Default: empty string which means there are no restrictions.
program=

; Number of retries to execute a job.
; Default: 0
failed_retries=3

; Number of retries to read a job
; Default: the value accepted for failed_retries
read_failed_retries=3

; The maximum time a job will be kept in a blacklist till it can be given for
; execution to the same worker node after it failed the job or the job is timed
; out.
; 0 means that a job will not be in the blacklist at all.
; Default: 2147483647 (float, seconds)
blacklist_time=2147483647

; The maximum time a job will be kept in a blacklist till it can be given for
; reading to the same reader after it failed reading the job or the job is
; timed out.
; 0 means that a job will not be in the blacklist at all.
; Default: the value accepted for blacklist_time (float, seconds)
read_blacklist_time=2147483647

; Maximum size of a job input. Max is 1M.
; Default: 2048 (bytes)
max_input_size=2048

; Maximum size of a job output. Max is 1M.
; Default: 2048 (bytes)
max_output_size=2048

; A list of hosts which are allowed to submit jobs.
; The separators for the host names are: ';', ',', space, '\n', '\r'.
; Default: empty string which means that any host can submit jobs.
subm_host=

; A list of hosts which are allowed to request jobs for execution.
; The separators for the host names are: ';', ',', space, '\n', '\r'.
; Default: empty string which means that any host can request jobs for execution.
wnode_host=

; A list of hosts which are allowed to request jobs for reading.
; The separators for the host names are: ';', ',', space, '\n', '\r'.
; Default: empty string which means that any host can request jobs for reading.
reader_host=

; Workernode inactivity timeout in seconds.
; If a registered worker node has no activity within the given timeout then it
; is marked as inactive and its run preferred affinities are cleared
; Default: 40 (float, seconds)
wnode_timeout=40


; Reader inactivity timeout in seconds
; If a reader has no activity within the given timeout then it is marked as
; inactive and its read preferred affinities are cleared
reader_timeout=40

; Pending jobs timeout.
; The timeout is measured starting from the submit time. If the job is still in
; the pending state (regardless of the pending->running->pending loops) when the
; timeout is detected, then the job will be deleted.
; Default: 60*60*24*7=604800 sec., i.e. 1 week (float)
pending_timeout=604800

; If the job is in the Pending state because its affinity is exclusively
; assigned to the worker nodes that are busy, then, after the specified
; timeout expires, the job will become eligible to be scheduled to ANY worker
; node that requests a job (using 'any_aff' or 'exclusive_new_aff' flags).
; If this timeout is configured as a non-zero value, then the procedure of
; picking a job for a worker node is altered as follows:
; - first a job is searched as usual
; - second the first pending job is checked. If it stays Pending longer than
;   this timeout then the job is given to the worker node. Otherwise the first
;   job is given
; Note: this alteration is only for requests with
; 'any_aff' or 'exclusive_new_aff' flags set on.
; The timeout can be given with microseconds precision.
; Default: 0.0 (float, seconds)
max_pending_wait_timeout=0.0

; If the job is in Done, Failed or Canceled state because its affinity is
; exclusively assigned to the readers that are busy, then, after the specified
; timeout expires, the job will become eligible to be scheduled to ANY reader
; that requests a job (using 'any_aff' or 'exclusive_new_aff' flags).
; If this timeout is configured as a non-zero value, then the procedure of
; picking a job for a reader is altered as follows:
; - first a job is searched as usual
; - second the first done, failed or canceled job is checked. If it stays in
;   the corresponding state longer than this timeout then the job is given to
;   the reader. Otherwise the first job is given
; Note: this alteration is only for requests with
; 'any_aff' or 'exclusive_new_aff' flags set on.
; The timeout can be given with microseconds precision.
; Default: 0.0 (float, seconds)
max_pending_read_wait_timeout=0.0

; If the scramble_job_keys is set to true then the job keys for the queue are
; provided in a scrambled format.
; Regardless of the parameter value, NetSchedule is able to handle both
; scrambled and non scrambled job keys. The parameter affects only how the
; job keys are printed (logged or sent to the clients via sockets).
; Default: false, the job keys are not scrambled
scramble_job_keys=false


; There could be arbitrary number of entries which start from 'linked_section_'.
; The value is a name of another section.
; The rest of the entry name is used as a prefix to provide the values from
; the linked section (QINF2 command)
linked_section_nc=


; Client registry GC settings are below.
; For each type of client - a worker node, an admin, a submitter, a reader and
; an unknown type - there are two settings:
; - a minimum number of records to be kept in the registry for this type of
;   clients
; - a timeout of inactivity after which a client becomes a candidate for
;   deletion

; The value must be > than wnode_timeout. If it is not then
; (at the startup only) the value will be calculated as
; max(2*wnode_timeout, 2*run_timeout, 3600)
; Default: 3600 (float, seconds)
client_registry_timeout_worker_node=3600.0
; Default: 20 (integer)
client_registry_min_worker_nodes=20
; Default: 20 (float, seconds)
client_registry_timeout_admin=20.0
; Default: 10 (integer)
client_registry_min_admins=10
; Default: 20 (float, seconds)
client_registry_timeout_submitter=20.0
; Default: 10 (integer)
client_registry_min_submitters=10
; If it is not set then the value is calculated as
; max(2*reader_timeout, 2*read_timeout, 600)
; Default: 600 (float, seconds)
client_registry_timeout_reader=600.0
; Default: 10 (integer)
client_registry_min_readers=10
; Default: 20 (float, seconds)
client_registry_timeout_unknown=20.0
; Default: 10 (integer)
client_registry_min_unknowns=10




; Service resolution section
; The section contains a list of correspondances between service names and
; configured queues.
[service_to_queue]

; MyServiceName is a service identifier (non case sensitive)
; TEST is a configured static queue
MyServiceName = TEST

; There could be as many records in the section as required.
; Many services may refer to the same queue.
AnotherService = TEST




; The 'error_emulator' section is analyzed only in the debug builds i.e.
; #if defined(_DEBUG) && !defined(NDEBUG)
; ...
; #endif
[error_emulator]

; F:Ff  Fb-Fe
; F        int, number of used FD in the HEALTH report instead the real usage
;          -1 means there will be no substitution
; Ff       integer, frequency with which the corresponding event is emulated;
;          zero means never; 1 means every time; 2 means every other time;  etc.
;          It's optional, default is: 1 (every time)
; Fb-Fe    integers, the range of requests's serial numbers for which the
;          particular type of error emulation is turned on. It's optional,
;          default is: from zero to MAX_UINT
fd_report = -1:1 0-4294967295

; M:Fm  Mb-Me
; M        int, number of used memory bytes in the HEALTH report instead of the
;          real usage
;          -1 means there will be no substitution
; Fm       integer, frequency with which the corresponding event is emulated;
;          zero means never; 1 means every time; 2 means every other time;  etc.
;          It's optional, default is: 1 (every time)
; Mb-Me    integers, the range of requests's serial numbers for which the
;          particular type of error emulation is turned on. It's optional,
;          default is: from zero to MAX_UINT
mem_report = -1:1 0-4294967295

; D:Fd  Db-De
; D        double, delay in seconds before writing into the client socket
; Fd       integer, frequency with which the corresponding event is emulated;
;          zero means never; 1 means every time; 2 means every other time;  etc.
;          It's optional, default is: 1 (every time)
; Db-De    integers, the range of requests's serial numbers for which the
;          particular type of error emulation is turned on. It's optional,
;          default is: from zero to MAX_UINT
delay = 0.0:1 0-4294967295

; B:Fb  Bb-Be
; B        boolean, if TRUE then the connection should be dropped straight
;          before a response is written to the client
; Fb       integer, frequency with which the corresponding event is emulated;
;          zero means never; 1 means every time; 2 means every other time;  etc.
;          It's optional, default is: 1 (every time)
; Bb-Be    integers, the range of requests's serial numbers for which the
;          particular type of error emulation is turned on. It's optional,
;          default is: from zero to MAX_UINT
drop_before_reply = false:1 0-4294967295

; A:Fa  Ab-Ae
; A        boolean, if TRUE then the connection should be dropped straight
;          after a response is written to the client
; Fa       integer, frequency with which the corresponding event is emulated;
;          zero means never; 1 means every time; 2 means every other time;  etc.
;          It's optional, default is: 1 (every time)
; Ab-Ae    integers, the range of requests's serial numbers for which the
;          particular type of error emulation is turned on. It's optional,
;          default is: from zero to MAX_UINT
drop_after_report = false:1 0-4294967295

; G:Fg  Gb-Ge
; G        boolean, if TRUE then the data specified below in the garbage_data
;          parameter will be sent instead of the real response
; Fg       integer, frequency with which the corresponding event is emulated;
;          zero means never; 1 means every time; 2 means every other time;  etc.
;          It's optional, default is: 1 (every time)
; Gb-Ge    integers, the range of requests's serial numbers for which the
;          particular type of error emulation is turned on. It's optional,
;          default is: from zero to MAX_UINT
reply_with_garbage = false:1 0-4294967295

; If reply_with_garbage is set to true then this will be sent to the client
; instead of the real response
; string, default value:
; please define [error_emulator]/garbage_data parameter value
garbage_data = "please define [error_emulator]/garbage_data parameter value"


